[
  {
    "id": 1,
    "title": "Quick Sort Algorithm",
    "description": "Efficient sorting algorithm using divide and conquer",
    "language": "javascript",
    "code": "function quickSort(arr) {\n    if (arr.length <= 1) return arr;\n    \n    const pivot = arr[Math.floor(arr.length / 2)];\n    const left = arr.filter(x => x < pivot);\n    const middle = arr.filter(x => x === pivot);\n    const right = arr.filter(x => x > pivot);\n    \n    return [...quickSort(left), ...middle, ...quickSort(right)];\n}",
    "tags": ["algorithm", "sorting", "recursion"],
    "dateAdded": "2024-01-15"
  },
  {
    "id": 2,
    "title": "API Request with Error Handling",
    "description": "Fetch data from API with proper error handling",
    "language": "javascript",
    "code": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Fetch error:', error);\n        throw error;\n    }\n}",
    "tags": ["api", "async", "error-handling", "fetch"],
    "dateAdded": "2024-01-20"
  },
  {
    "id": 3,
    "title": "Binary Search",
    "description": "Efficient search algorithm for sorted arrays",
    "language": "python",
    "code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
    "tags": ["algorithm", "search", "binary"],
    "dateAdded": "2024-01-18"
  },
  {
    "id": 4,
    "title": "CSS Flexbox Center",
    "description": "Perfect centering with CSS Flexbox",
    "language": "css",
    "code": ".container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n.centered-content {\n    text-align: center;\n}",
    "tags": ["css", "flexbox", "centering", "layout"],
    "dateAdded": "2024-01-22"
  },
  {
    "id": 5,
    "title": "React Custom Hook",
    "description": "Custom hook for managing local storage state",
    "language": "javascript",
    "code": "import { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            return initialValue;\n        }\n    });\n\n    const setValue = (value) => {\n        try {\n            setStoredValue(value);\n            window.localStorage.setItem(key, JSON.stringify(value));\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return [storedValue, setValue];\n}",
    "tags": ["react", "hooks", "localstorage", "custom-hook"],
    "dateAdded": "2024-01-25"
  },
  {
    "id": 6,
    "title": "SQL Join Query",
    "description": "Complex join query with multiple conditions",
    "language": "sql",
    "code": "SELECT \n    u.id,\n    u.username,\n    u.email,\n    p.title as post_title,\n    COUNT(c.id) as comment_count\nFROM users u\nLEFT JOIN posts p ON u.id = p.user_id\nLEFT JOIN comments c ON p.id = c.post_id\nWHERE u.active = 1\n    AND p.published_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY u.id, p.id\nORDER BY comment_count DESC, p.published_date DESC;",
    "tags": ["sql", "joins", "database", "query"],
    "dateAdded": "2024-01-28"
  }
]